Oprea Mihail 334CC
Tema1 apd
	First, in main, I obtained the number of map and reduce threads from the command line arguments in the 
variables int map_threads and reduce_threads, respectively. In the variable int cores, I calculated the total 
number of threads given by the sum of these two types of threads.

I opened the file received at argv[3] in FILE *fp and saved the number of files to process in the variable 
int N.

I created and allocated an array of th structures for each map thread, where I store the thread's ID, the 
number of map and reduce threads, N, the name of the file that a map thread needs to process, a variable 
called int putere (power), a variable int ready initialized to 0, and a vector of vectors acting as a list 
for each list corresponding to a power.

Then I start executing the map threads with the f_map function. Initially, each thread is allocated a file. 
After each receives a file, there are still N-map_thread files to process, which are allocated to the first 
thread that finishes, and so on in the for loop at line 181. Here I go through each structure and check for 
which ones the stored variable int ready == 1, which tells me that the map thread with the ID from the 
structure has finished processing what it had before and is available to receive a new file to process, after 
which ready becomes 0 again. Ready becomes 1 at the end of the f_map function. I use a while(1) waiting for 
a thread to become available.

In the function void *f_map(void *arg), I receive the structure corresponding to the thread's ID, then read 
the file stored in it and start going through the values in the file to see which ones meet the condition of 
being a number to a power of 2 up to the number of reduce threads + 1, and store it in the list that keeps 
numbers to a specific power.

The execution of reduce threads is done with the f_reduce function where I give as an argument to the 
function for each thread, the entire array of structures so that a reduce thread has access to the specific 
list for a certain power from each map thread.

In the function void *f_reduce(void *arg), I first wait for all map threads to finish execution, and this 
will happen in a while(1) where I check if they all have their ready variable in their structure set to 1.

After that, I gather all values for each list from each structure in a set declared as set<int> list_reduce, 
then count the values in the set and display the value in the corresponding output file. The role of the int 
putere (power) variable in a structure is used only for ID 0 where power = 1 at the start, and each time a 
reduce thread starts execution through the call to void *f_reduce(void *arg), it will increase at the 
beginning of the function between pthread_mutex_lock(&mutex1) and pthread_mutex_unlock(&mutex1) by 1 through 
t[0].putere++, so the first thread that arrives will work with power 2 lists, the next with power 3 lists, 
and so on.

At the very end in main, I join all threads and destroy the mutex1 mutex.
